# This is a lint and test workflow for Flutter CI

name: Relase (staging)

on:
  push:
    branches:
      - release/ios-*
  pull_request:
    branches:
      - release/ios-*
jobs:
  deploy:
    name: Build iOS
    runs-on: macOS-latest
    steps:
      # Setup environment
      - uses: ruby/setup-ruby@v1.71.0
        with:
          ruby-version: '2.7.2'
      - uses: actions/checkout@v2.3.2

      # Setup the Flutter environment.
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable' # 'dev', 'alpha', default to: 'stable'

      - name: Get Flutter dependencies.
        run: flutter pub get

      - name: Build app
        run: flutter build ios --flavor staging -t lib/main-staging.dart --no-codesign

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Export ipa and upload to firebase
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: "ios release_staging"
          options: '{"token": "${{secrets.FIREBASE_TOKEN}}", "app_id": "${{secrets.FIREBASE_IOS_APP_ID}}"}'
