// Mocks generated by Mockito 5.0.7 from annotations
// in survey/test/modules/home/home_interactor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/src/subjects/behavior_subject.dart' as _i2;
import 'package:survey/models/survey_info.dart' as _i4;
import 'package:survey/models/user_info.dart' as _i6;
import 'package:survey/modules/home/home_module.dart' as _i3;
import 'package:survey/repositories/auth_repository.dart' as _i9;
import 'package:survey/repositories/survey_repository.dart' as _i7;
import 'package:tuple/tuple.dart' as _i5;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeBehaviorSubject<T> extends _i1.Fake
    implements _i2.BehaviorSubject<T> {}

/// A class which mocks [HomeInteractorDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeInteractorDelegate extends _i1.Mock
    implements _i3.HomeInteractorDelegate {
  MockHomeInteractorDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BehaviorSubject<List<_i4.SurveyInfo>> get surveysDidFetchFromCached =>
      (super.noSuchMethod(Invocation.getter(#surveysDidFetchFromCached),
              returnValue: _FakeBehaviorSubject<List<_i4.SurveyInfo>>())
          as _i2.BehaviorSubject<List<_i4.SurveyInfo>>);
  @override
  _i2.BehaviorSubject<Exception> get surveysDidFailToFetchFromCached =>
      (super.noSuchMethod(Invocation.getter(#surveysDidFailToFetchFromCached),
              returnValue: _FakeBehaviorSubject<Exception>())
          as _i2.BehaviorSubject<Exception>);
  @override
  _i2.BehaviorSubject<_i5.Tuple2<List<_i4.SurveyInfo>, bool>>
      get surveysDidFetchFromRemote =>
          (super.noSuchMethod(Invocation.getter(#surveysDidFetchFromRemote),
                  returnValue: _FakeBehaviorSubject<
                      _i5.Tuple2<List<_i4.SurveyInfo>, bool>>())
              as _i2.BehaviorSubject<_i5.Tuple2<List<_i4.SurveyInfo>, bool>>);
  @override
  _i2.BehaviorSubject<Exception> get surveysDidFailToFetchFromRemote =>
      (super.noSuchMethod(Invocation.getter(#surveysDidFailToFetchFromRemote),
              returnValue: _FakeBehaviorSubject<Exception>())
          as _i2.BehaviorSubject<Exception>);
  @override
  _i2.BehaviorSubject<_i6.UserInfo> get authenticatedUserDidGet =>
      (super.noSuchMethod(Invocation.getter(#authenticatedUserDidGet),
              returnValue: _FakeBehaviorSubject<_i6.UserInfo>())
          as _i2.BehaviorSubject<_i6.UserInfo>);
}

/// A class which mocks [SurveyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSurveyRepository extends _i1.Mock implements _i7.SurveyRepository {
  MockSurveyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isSurveysCached =>
      (super.noSuchMethod(Invocation.getter(#isSurveysCached),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<List<_i4.SurveyInfo>> fetchSurveysFromCached() =>
      (super.noSuchMethod(Invocation.method(#fetchSurveysFromCached, []),
              returnValue:
                  Future<List<_i4.SurveyInfo>>.value(<_i4.SurveyInfo>[]))
          as _i8.Future<List<_i4.SurveyInfo>>);
  @override
  _i8.Future<List<_i4.SurveyInfo>> fetchSurveysFromRemote() =>
      (super.noSuchMethod(Invocation.method(#fetchSurveysFromRemote, []),
              returnValue:
                  Future<List<_i4.SurveyInfo>>.value(<_i4.SurveyInfo>[]))
          as _i8.Future<List<_i4.SurveyInfo>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i9.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super
          .noSuchMethod(Invocation.getter(#isAuthenticated), returnValue: false)
      as bool);
  @override
  _i8.Future<void> login({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#login, [], {#email: email, #password: password}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> attempt() =>
      (super.noSuchMethod(Invocation.method(#attempt, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> fetchUser() =>
      (super.noSuchMethod(Invocation.method(#fetchUser, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> attemptAndFetchUser() =>
      (super.noSuchMethod(Invocation.method(#attemptAndFetchUser, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> resetPassword({String? email}) => (super.noSuchMethod(
      Invocation.method(#resetPassword, [], {#email: email}),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i8.Future<void>);
}
